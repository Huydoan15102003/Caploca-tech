{"version":3,"file":"buildAsyncRequire.js","sourceRoot":"","sources":["../../src/async-require/buildAsyncRequire.ts"],"names":[],"mappings":";;;AAAA,6CAA+C;AAmC/C,iFAAiF;AACjF,SAAgB,iBAAiB,CAAC,YAA0B;IAC1D,MAAM,iBAAiB,GAAsB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjE,MAAM,oBAAoB,GAAyB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEvE,8FAA8F;IAC9F,SAAS,aAAa,CAAC,QAAgB;QACrC,OAAO,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,SAAS,YAAY,CACnB,QAAgB,EAChB,aAAqB,EAAE,EACvB,UAAuC,EAAE,cAAc,EAAE,KAAK,EAAE;QAEhE,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAC7D,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;QACjD,IAAI,UAAU,EAAE;YACd,kDAAkD;YAClD,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,EAAE;gBACzC,oBAAoB,CAAC,cAAc,CAAC,GAAG,IAAA,4BAAe,EAAC,UAAU,CAAC,CAAC,IAAI,CACrE,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAC7B,CAAC;aACH;YACD,kCAAkC;YAClC,OAAO,oBAAoB,CAAC,cAAc,CAAC,CAAC;SAC7C;QAED,OAAO,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAED,YAAY,CAAC,QAAQ,GAAG,UACtB,QAAgB,EAChB,UAAkB;QAElB,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5E,IAAI,MAAM,YAAY,OAAO,EAAE;YAC7B,MAAM,CAAC,IAAI,CACT,GAAG,EAAE,GAAE,CAAC,EACR,GAAG,EAAE,GAAE,CAAC,CACT,CAAC;SACH;IACH,CAAC,CAAC;IAEF,YAAY,CAAC,QAAQ,GAAG,UACtB,QAAgB,EAChB,UAAkB;QAElB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF;;;;;OAKG;IACH,YAAY,CAAC,oBAAoB,GAAG,UAClC,KAA6B;QAE7B,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF,OAAO,YAAY,CAAC;AACtB,CAAC;AApED,8CAoEC","sourcesContent":["import { loadBundleAsync } from \"./loadBundle\";\n\ntype ImportBundleNames = Record<string, string> & {\n  __proto__: null;\n};\n\ntype MetroRequire = {\n  (id: number): any;\n  importAll: (id: number) => any;\n};\n\ntype ImportBundlePromises = Record<string, Promise<any>> & {\n  __proto__?: null;\n};\n\n/**\n * Must satisfy the requirements of the Metro bundler.\n * https://github.com/facebook/metro/blob/f9fe277986ff7e7e53ae0418040f3aa1eb1c7056/packages/metro/src/ModuleGraph/worker/collectDependencies.js#L629-L639\n *\n * And https://github.com/facebook/metro/blob/fc29a1177f883144674cf85a813b58567f69d545/packages/metro/src/lib/getAppendScripts.js#L54-L56\n */\ntype AsyncRequire = {\n  <TModule>(\n    moduleID: number,\n    moduleName?: string,\n    options?: { isPrefetchOnly: boolean }\n  ): Promise<TModule | void> | TModule;\n  prefetch(moduleID: number, moduleName: string): void;\n  /** NOTE(EvanBacon): Unclear what this should return `__jsResource` ?? */\n  resource(moduleID: number, moduleName: string): never;\n\n  /** Register the 'moduleID<>bundle path' that can be loaded via `asyncRequire(moduleID)` */\n  addImportBundleNames(names: Record<string, string>): void;\n};\n\n/** Create an `asyncRequire` function in the expected shape for Metro bundler. */\nexport function buildAsyncRequire(metroRequire: MetroRequire): AsyncRequire {\n  const importBundleNames: ImportBundleNames = Object.create(null);\n  const importBundlePromises: ImportBundlePromises = Object.create(null);\n\n  // This is basically `__webpack_require__.u` -> returns the bundle path for a numeric moduleID\n  function getBundlePath(moduleID: string): string | undefined {\n    return importBundleNames[moduleID];\n  }\n\n  function asyncRequire<TModule>(\n    moduleID: number,\n    moduleName: string = \"\",\n    options: { isPrefetchOnly: boolean } = { isPrefetchOnly: false }\n  ): Promise<TModule | void> | TModule {\n    console.log(\"async require:\", moduleID, moduleName, options);\n    if (options.isPrefetchOnly) {\n      return Promise.resolve();\n    }\n\n    const stringModuleID = String(moduleID);\n    const bundlePath = getBundlePath(stringModuleID);\n    if (bundlePath) {\n      // Prevent loading the same module more than once.\n      if (!importBundlePromises[stringModuleID]) {\n        importBundlePromises[stringModuleID] = loadBundleAsync(bundlePath).then(\n          () => metroRequire(moduleID)\n        );\n      }\n      // Return for the user to resolve.\n      return importBundlePromises[stringModuleID];\n    }\n\n    return metroRequire.importAll(moduleID);\n  }\n\n  asyncRequire.prefetch = function (\n    moduleID: number,\n    moduleName: string\n  ): void {\n    const result = asyncRequire(moduleID, moduleName, { isPrefetchOnly: true });\n    if (result instanceof Promise) {\n      result.then(\n        () => {},\n        () => {}\n      );\n    }\n  };\n\n  asyncRequire.resource = function (\n    moduleID: number,\n    moduleName: string\n  ): never {\n    throw new Error(\"Unimplemented Metro runtime feature\");\n  };\n\n  /**\n   * Register modules that can be loaded async.\n   * Key is a numeric string and value is a string denoting the bundle path.\n   *\n   * @example { '1': 'Second' }\n   */\n  asyncRequire.addImportBundleNames = function (\n    names: Record<string, string>\n  ): void {\n    Object.assign(importBundleNames, names);\n  };\n\n  return asyncRequire;\n}\n"]}