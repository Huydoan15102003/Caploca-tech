{"version":3,"file":"fetchAsync.native.js","sourceRoot":"","sources":["../../src/async-require/fetchAsync.native.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;AAEH,+CAAwC;AACxC,mBAAmB;AACnB,iGAAsE;AAEtE,SAAgB,UAAU,CACxB,GAAW;IAEX,IAAI,EAAE,GAAkB,IAAI,CAAC;IAC7B,IAAI,YAAY,GAAkB,IAAI,CAAC;IACvC,IAAI,OAAO,GAA2B,EAAE,CAAC;IACzC,IAAI,YAAY,GAAkC,IAAI,CAAC;IACvD,IAAI,gBAAgB,GAAkC,IAAI,CAAC;IAC3D,IAAI,gBAAgB,GAAkC,IAAI,CAAC;IAC3D,OAAO,IAAI,OAAO,CAChB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAClB,YAAY,GAAG,uBAAU,CAAC,WAAW,CACnC,uBAAuB,EACvB,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,EAAE;YACxB,IAAI,SAAS,KAAK,EAAE,EAAE;gBACpB,YAAY,GAAG,QAAQ,CAAC;aACzB;QACH,CAAC,CACF,CAAC;QACF,gBAAgB,GAAG,uBAAU,CAAC,WAAW,CACvC,2BAA2B,EAC3B,CAAC,CAAC,SAAS,EAAE,MAAM,EAAE,eAAe,CAAC,EAAE,EAAE;YACvC,IAAI,SAAS,KAAK,EAAE,EAAE;gBACpB,OAAO,GAAG,eAAe,CAAC;aAC3B;QACH,CAAC,CACF,CAAC;QACF,gBAAgB,GAAG,uBAAU,CAAC,WAAW,CACvC,4BAA4B,EAC5B,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,EAAE;YACrB,IAAI,SAAS,KAAK,EAAE,EAAE;gBACpB,IAAI,KAAK,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;qBAAM;oBACL,OAAO,CAAC,EAAE,IAAI,EAAE,YAAa,EAAE,OAAO,EAAE,CAAC,CAAC;iBAC3C;aACF;QACH,CAAC,CACF,CAAC;QACF,uBAAU,CAAC,WAAW,CACpB,KAAK,EACL,cAAc,EACd,GAAG,EACH;YACE,eAAe,EAAE,uBAAQ,CAAC,EAAE;SAC7B,EACD,EAAE,EACF,MAAM,EACN,KAAK,EACL,CAAC,EACD,CAAC,SAAS,EAAE,EAAE;YACZ,EAAE,GAAG,SAAS,CAAC;QACjB,CAAC,EACD,IAAI,CACL,CAAC;IACJ,CAAC,CACF,CAAC,OAAO,CAAC,GAAG,EAAE;QACb,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,EAAE,CAAC;QACvB,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,EAAE,CAAC;QAC3B,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC;AA7DD,gCA6DC","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Platform } from \"react-native\";\n// @ts-expect-error\nimport Networking from \"react-native/Libraries/Network/RCTNetworking\";\n\nexport function fetchAsync(\n  url: string\n): Promise<{ body: string; headers: Record<string, string> }> {\n  let id: string | null = null;\n  let responseText: string | null = null;\n  let headers: Record<string, string> = {};\n  let dataListener: { remove: () => void } | null = null;\n  let completeListener: { remove: () => void } | null = null;\n  let responseListener: { remove: () => void } | null = null;\n  return new Promise<{ body: string; headers: Record<string, string> }>(\n    (resolve, reject) => {\n      dataListener = Networking.addListener(\n        \"didReceiveNetworkData\",\n        ([requestId, response]) => {\n          if (requestId === id) {\n            responseText = response;\n          }\n        }\n      );\n      responseListener = Networking.addListener(\n        \"didReceiveNetworkResponse\",\n        ([requestId, status, responseHeaders]) => {\n          if (requestId === id) {\n            headers = responseHeaders;\n          }\n        }\n      );\n      completeListener = Networking.addListener(\n        \"didCompleteNetworkResponse\",\n        ([requestId, error]) => {\n          if (requestId === id) {\n            if (error) {\n              reject(error);\n            } else {\n              resolve({ body: responseText!, headers });\n            }\n          }\n        }\n      );\n      Networking.sendRequest(\n        \"GET\",\n        \"asyncRequest\",\n        url,\n        {\n          \"expo-platform\": Platform.OS,\n        },\n        \"\",\n        \"text\",\n        false,\n        0,\n        (requestId) => {\n          id = requestId;\n        },\n        true\n      );\n    }\n  ).finally(() => {\n    dataListener?.remove();\n    completeListener?.remove();\n    responseListener?.remove();\n  });\n}\n"]}