{"version":3,"file":"fetchThenEval.js","sourceRoot":"","sources":["../../src/async-require/fetchThenEval.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAM1C;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,GAAW;IAC5C,OAAO,IAAA,uBAAU,EAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;QAChD,IACE,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;YAC/B,OAAO,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,EACxD;YACA,+BAA+B;YAC/B,MAAM,IAAI,KAAK,CACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,2BAA2B,GAAG,GAAG,CAC9D,CAAC;SACH;QAED,gFAAgF;QAEhF,oEAAoE;QACpE,qEAAqE;QACrE,IAAI,MAAM,CAAC,uBAAuB,EAAE;YAClC,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SAC3C;aAAM;YACL,mCAAmC;YACnC,IAAI,CAAC,IAAI,CAAC,CAAC;SACZ;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAvBD,gDAuBC","sourcesContent":["import { fetchAsync } from \"./fetchAsync\";\n\ndeclare let global: {\n  globalEvalWithSourceUrl?: any;\n};\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, headers }) => {\n    if (\n      headers[\"Content-Type\"] != null &&\n      headers[\"Content-Type\"].indexOf(\"application/json\") >= 0\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(\n        JSON.parse(body).message || `Unknown error fetching '${url}'`\n      );\n    }\n\n    // NOTE(EvanBacon): All of this code is ignored in development mode at the root.\n\n    // Some engines do not support `sourceURL` as a comment. We expose a\n    // `globalEvalWithSourceUrl` function to handle updates in that case.\n    if (global.globalEvalWithSourceUrl) {\n      global.globalEvalWithSourceUrl(body, url);\n    } else {\n      // eslint-disable-next-line no-eval\n      eval(body);\n    }\n  });\n}\n"]}